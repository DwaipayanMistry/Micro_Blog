// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    userName  String   @unique
    clarkId   String   @unique
    name      String?
    bio       String?
    image     String?
    location  String?
    website   String?
    createdAt DateTime @default(now())
    updateAt  DateTime @updatedAt

    // version
    version String? @default("v1")

    // <RELATIONS>
    posts     Post[]
    comments  Comment[]
    likes     Like[]
    followers Follows[] @relation("following")
    following Follows[] @relation("follower")

    notifications        Notification[] @relation("userNotifications") //Notification received by the user
    notificationsCreated Notification[] @relation("notificationCreator") // Notification created by the user
}

model Post {
    id        String   @id @default(cuid())
    authorId  String
    content   String?
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // version
    version   String?  @default("v1")

    // <RELATIONS>
    author       User?          @relation(fields: [authorId], references: [id], onDelete: Cascade)
    comments     Comment[]
    like         Like[]
    notification Notification[]
    // userId   String?
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    authorId  String
    postId    String
    createdAt DateTime @default(now())
    // updatedAt DateTime @updatedAt
    // version
    version   String?  @default("v1")

    // <RELATIONS>
    author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
    post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
    Notification Notification[]

    @@index([authorId, postId]) //Create in index on authorId & postId   
}

model Like {
    id        String   @id @default(cuid())
    postId    String
    userId    String
    createdAt DateTime @default(now())
    // version
    version   String?  @default("v1")

    // <RELATIONS>
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@index([userId, postId])
}

model Follows {
    followerId  String
    followingId String
    createdAt   DateTime @default(now())
    // version
    version     String?  @default("v1")

    // <RELATIONS>
    follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId])
    @@index([followerId, followingId])
}

model Notification {
    id        String           @id @default(cuid())
    userId    String //     Receiver
    creatorId String //     Creator
    type      NotificationType
    read      Boolean          @default(false)
    postId    String? //    optional because follows do not have id
    commentId String?
    createdAt DateTime         @default(now())
    // version
    version   String?          @default("v1")

    // <RELATIONS>
    user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
    creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

enum NotificationType {
    LIKE
    COMMENT
    FOLLOW
}
